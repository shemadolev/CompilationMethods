%{
    #include <iostream>
    #include "part2_helpers.hpp"
    #include "code_class.hpp"
    using namespace std;

    extern int yylex();
    void yyerror(const char*);
    void unexpected_error(const char*);

    extern int yylineno;
    extern const char* yytext;

    ParserNode *parseTree; 
    codeClass code;
    VarScopeTable *varScopeTable;

    //frame start pointer
    #define $FP "I1"
    //stack pointer (next write pointer in stack)
    #define $SP "I2"
    //return int type
    #define $RT_I "I3"
    //return float type
    #define $RT_F "F0"
%}

// Reserved words 
%token  INT
        FLOAT
        VOID
        WRITE
        READ
        WHILE
        DO
        IF
        RETURN
        FULL_WHILE
        BREAK

// Solve dangling else (select shift over reduce)  
%precedence THEN
%precedence ELSE

// Other tokens (no special precedence)
%token ID INTEGERNUM REALNUM STR

//Associativity & precedence matched to C++ syntax
%right ASSIGN
%left OR
%left AND
%left RELOP
%left ADDOP
%left MULOP
%right NOT

// Symbols (Highest priority)
%precedence '(' ')' '{' '}' '.' ';' ',' ':'

%%

program : fdefs                         {parseTree=new NodeSymbol("PROGRAM",$1);}
;

fdefs : /* epsilon */                   {$$=new NodeSymbol("FDEFS", EPSILON);}
	| fdefs func_api M blk            {
                $$=new NodeSymbol("FDEFS",concatList(concatList($1,$2),$3));
                //todo - backpatch all callers
        }
        | fdefs func_api ';'            {$$=new NodeSymbol("FDEFS",concatList(concatList($1,$2),$3));}
;

func_api : type ID '(' func_args ')'    {$$=new NodeSymbol("FUNC_API",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));} 
;

func_args : func_arglist                {$$=new NodeSymbol("FUNC_ARGS",$1);}       
            | /* epsilon */             {$$=new NodeSymbol("FUNC_ARGS", EPSILON);}
;

func_arglist :  func_arglist ',' dcl    {$$=new NodeSymbol("FUNC_ARGLIST",concatList(concatList($1,$2),$3));} 
                | dcl                   {$$=new NodeSymbol("FUNC_ARGLIST",$1);}
;

blk : '{' stlist '}'                    {$$=new NodeSymbol("BLK",concatList(concatList($1,$2),$3));} 
;

dcl :   ID ':' type                     {$$=new NodeSymbol("DCL",concatList(concatList($1,$2),$3));}
        | ID ',' dcl                    {$$=new NodeSymbol("DCL",concatList(concatList($1,$2),$3));}
;

type :  INT                             {$$=new NodeSymbol("TYPE",$1);}
        | FLOAT                         {$$=new NodeSymbol("TYPE",$1);}
        | VOID                          {$$=new NodeSymbol("TYPE",$1);} 
;

stlist : stlist stmt                    {$$=new NodeSymbol("STLIST",concatList($1,$2));}
         |/* epsilon */                 {$$=new NodeSymbol("STLIST", EPSILON);}
;

stmt :  dcl ';'                         {$$=new NodeSymbol("STMT",concatList($1,$2));}
        | assn                          {$$=new NodeSymbol("STMT",$1);}
        | exp ';'                       {$$=new NodeSymbol("STMT",concatList($1,$2));}
        | cntrl                         {$$=new NodeSymbol("STMT",$1);}
        | read                          {$$=new NodeSymbol("STMT",$1);}
        | write                         {$$=new NodeSymbol("STMT",$1);}
        | return                        {$$=new NodeSymbol("STMT",$1);}
        | blk                           {$$=new NodeSymbol("STMT",$1);}
        | BREAK ';'                     {$$=new NodeSymbol("STMT",concatList($1,$2));}
;

return : RETURN exp ';'                 {$$=new NodeSymbol("RETURN",concatList(concatList($1,$2),$3));}
        | RETURN ';'                    {$$=new NodeSymbol("RETURN",concatList($1,$2));}
;

write : WRITE '(' exp ')' ';'           {
                $$=new NodeSymbol("WRITE",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));
                
                NodeExpression *exp = $3;

                if(exp->expType == eINT)
                    code->emit("PRNTI", exp->place);
                else if(exp->expType == eFLOAT)
                    code->emit("PRNTF", exp->place);
                else //eVOID
                    unexpected_error("Tried to print void expression");
                } 
        | WRITE '(' STR ')' ';'         {
                $$=new NodeSymbol("WRITE",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));
                NodeToken *STR = $3;

                string str = STR->value;
                for(int i=0; i<str.length();i++){
                    if(str[i] == '\\'){
                        i++;
                        switch(str[i]){
                            case 'n':
                                code->emit("PRNTC 10");
                                break;
                            case 't':
                                code->emit("PRNTC 9");
                                break;
                            case '"':
                                code->emit("PRNTC 34");
                                break;
                            default:
                                unexpected_error("Unknown char after \\");
                        }
                    } else {
                        code->emit("PRNTC", to_string(int(str[i])));
                    }
                }
        } 
;

read : READ '(' lval ')' ';'            {$$=new NodeSymbol("READ",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));} 
;

assn : lval ASSIGN exp ';'              {$$=new NodeSymbol("ASSN",concatList(concatList(concatList($1,$2),$3),$4));} 
;

lval : ID                               {$$=new NodeSymbol("LVAL",$1);}
;

fullwhile : FULL_WHILE N M bexp DO M stmt {
                NodeBexp *fullwhile = $$;
                NodeMarkerN *N = $2;
                NodeMarkerM *M1 = $3;
                NodeBexp *bexp = $4;
                NodeMarkerM *M2 = $6;
                NodeStatement *stmt = $7;

                fullwhile = new NodeBexp("FULLWHILE",concatList(concatList(concatList($1,$2),$3),$4));

                code->emit("UJUMP", M1->quad);
                code->backpatch(N->nextlist,code->nextQuad());
                string res = varScopeTable->newTemp(eINT);
                code->emit("COPYI", res , "0"); 
                code->emit("UJUMP", M1->quad);
                code->backpatch(bexp->truelist,code->nextQuad());
                code->emit("COPYI", res , "1"); 
                code->emit("UJUMP", M2->quad);
                code->backpatch(bexp->falselist,code->nextQuad());
                fullwhile->falselist = CodeLineList(code->nextQuad());
                fullwhile->falselist.merge(stmt->breaklist);
                code->emit("BREQZ", res , "-1"); 
                fullwhile->truelist = CodeLineList(code->nextQuad());
                code->emit("UJUMP -1");
                code->backpatch(stmt->nextlist,M1->quad);
        } 
;

cntrl : IF bexp THEN M stmt N ELSE M stmt     {
                NodeStatement *cntrl = $$;
                NodeBexp *bexp = $2;
                NodeMarkerM *M1 = $4;
                NodeBexp *stmt1 = $5;
                NodeMarkerN *N = $6;
                NodeMarkerM *M2 = $8;
                NodeBexp *stmt2 = $9;
                
                cntrl = new NodeStatement("CNTRL",concatList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6));
                
                code->backpatch(bexp->truelist, M1->quad);
                code->backpatch(bexp->falselist, M2->quad);
                cntrl->nextlist.merge(N->nextlist);
                cntrl->nextlist.merge(stmt1->nextlist);
                cntrl->nextlist.merge(stmt2->nextlist);
                
        } 
        | IF bexp THEN M stmt             {
                NodeStatement *cntrl = $$;
                NodeBexp *bexp = $2;
                NodeMarkerM *M = $4;
                NodeBexp *stmt = $5;
                
                cntrl = new NodeStatement("CNTRL",concatList(concatList(concatList($1,$2),$3),$4));
                
                code->backpatch(bexp->truelist, M->quad);
                cntrl->nextlist.merge(bexp->falselist);
                cntrl->nextlist.merge(stmt->nextlist);
        
        } 
        | WHILE M bexp DO M stmt            {
                NodeStatement *cntrl = $$;
                NodeMarkerM *M1 = $2;
                NodeBexp *bexp = $3;
                NodeMarkerM *M2 = $5;
                NodeStatement *stmt = $6;

                cntrl = new NodeStatement("CNTRL",concatList(concatList(concatList($1,$2),$3),$4));

                code->backpatch(bexp->truelist,M2->quad);
                code->backpatch(stmt->nextlist,M1->quad);
                cntrl->nextlist.merge(bexp->falselist);
                code->emit("UJUMP", M1->quad); //support "fall through" from stmt
        } 
        | fullwhile                     {
                NodeStatement *cntrl = $$;
                NodeBexp *fullwhile = $1;
                
                cntrl = new NodeStatement("CNTRL",$1);
                // fullwhile has truelist & falselist that in a case of cntrl statement both points on the same "goto line"  
                cntrl->nextlist.merge(fullwhile->truelist);
                cntrl->nextlist.merge(fullwhile->falselist);
        }
;

bexp :  bexp OR M bexp                  {
                NodeBexp *bexp = $$;
                NodeBexp *bexp1 = $1;
                NodeMarkerM *M = $3;
                NodeBexp *bexp2 = $4;
                
                bexp = new NodeBexp("BEXP",concatList(concatList($1,$2),$3));
        
                code->backpatch(bexp1->falselist, M->quad);
                bexp->truelist.merge(bexp1->truelist);
                bexp->truelist.merge(bexp2->truelist);
                bexp->falselist.merge(bexp2->falselist);
        }
        | bexp AND M bexp               {
                NodeBexp *bexp = $$;
                NodeBexp *bexp1 = $1;
                NodeMarkerM *M = $3;
                NodeBexp *bexp2 = $4;
                
                bexp = new NodeBexp("BEXP",concatList(concatList($1,$2),$3));
                
                code->backpatch(bexp1->truelist,M->quad);
                bexp->truelist.merge(bexp2->truelist);
                bexp->falselist.merge(bexp1->falselist);
                bexp->falselist.merge(bexp2->falselist);
        }
        | NOT bexp                      {
                NodeBexp *bexp = $$;        
                NodeBexp *bexp1 = $2;        
                
                bexp = new NodeBexp("BEXP",concatList($1,$2));

                bexp->falselist.merge(bexp1->truelist);
                bexp->truelist.merge(bexp1->falselist);
        }
        | exp RELOP exp                 {
                NodeBexp *bexp = $$;        
                NodeBexp *bexp1 = $2;

                bexp = new NodeBexp("BEXP",concatList(concatList($1,$2),$3));
                
                // calculate RELOP
                string res = varScopeTable->newTemp(eINT);
                code->emit(...something to support different RELOP, some switch case)
                // branch for res
                bexp->truelist.push_back(code->nextQuad());
                code->emit("UJUMP", res);
                
                // TODO: should check that exp1 and exp2 have the same type ->>> or semantic error 
        }
        | '(' bexp ')'                  {
                NodeBexp *bexp = $$;        
                NodeBexp *bexp1 = $2;
                
                bexp = new NodeBexp("BEXP",concatList(concatList($1,$2),$3));

                bexp->truelist = bexp1->truelist;        
                bexp->falselist = bexp1->falselist;        
        }
        | fullwhile                     {
                NodeBexp *bexp = $$;        
                NodeBexp *fullwhile = $1;
                
                bexp = new NodeBexp("BEXP",$1);

                bexp->truelist = fullwhile->truelist;        
                bexp->falselist = fullwhile->falselist;        
        }
;

exp :   exp ADDOP exp 	                {$$=new NodeSymbol("EXP",concatList(concatList($1,$2),$3));}
        | exp MULOP exp                 {$$=new NodeSymbol("EXP",concatList(concatList($1,$2),$3));}
        | '(' exp ')'                   {$$=new NodeSymbol("EXP",concatList(concatList($1,$2),$3));}
        | '(' type ')' exp              {$$=new NodeSymbol("EXP",concatList(concatList(concatList($1,$2),$3),$4));}
        | ID                            {$$=new NodeSymbol("EXP",$1);}
        | num                           {$$=new NodeSymbol("EXP",$1);}
        | call                          {$$=new NodeSymbol("EXP",$1);}
;

num :   INTEGERNUM                      {$$=new NodeSymbol("NUM",$1);}
        | REALNUM                       {$$=new NodeSymbol("NUM",$1);}
;

call : ID '(' call_args ')'             {
        $$=new NodeSymbol("CALL",concatList(concatList(concatList($1,$2),$3),$4));
        //...
        varScopeTable->storeIds();
        //Back FP
        //Pass arguments to function
        //...
        varScopeTable->loadIds();
        //...

        }
;

call_args : call_arglist                {$$=new NodeSymbol("CALL_ARGS",$1);}
            |/* epsilon */              {$$=new NodeSymbol("CALL_ARGS", EPSILON);} 
;

call_arglist :  call_arglist ',' exp    {
                $$=new NodeArgsList("CALL_ARGLIST",concatList(concatList($1,$2),$3));
                $$->argsList = $1->argsList;
                $$->argsList.push_back(exp);
        }
        | exp                           {
                $$=new NodeArgsList("CALL_ARGLIST",$1);
                $$->argsList.push_back(exp);
        }
;

M : /*epsilon*/                         {$$=new NodeMarkerM();}
;

N : /*epsilon*/                         {$$=new NodeMarkerN();}
;

%%

void unexpected_error(const char* err){
    cout << err << endl;
    exit(10);
}

void yyerror(const char*) {
    cout << "Syntax error: '" << yytext << "' in line number " << yylineno << endl;
    exit(2);
}
