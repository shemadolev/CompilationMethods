%{
    #include <iostream>
    #include "part2_helpers.hpp"
    #include "code_class.hpp"
    #include "symbol_table.hpp"
    #include <list>
    using namespace std;

    extern int yylex();
    void yyerror(const char*);
    void unexpected_error(const char*);

    extern int yylineno;
    extern const char* yytext;

    ParserNode *parseTree; 
    codeClass code;
    VariableTable varTable;
    FunctionTable funcTable;

%}

// Reserved words 
%token  INT
        FLOAT
        VOID
        WRITE
        READ
        WHILE
        DO
        IF
        RETURN
        FULL_WHILE
        BREAK

// Solve dangling else (select shift over reduce)  
%precedence THEN
%precedence ELSE

// Other tokens (no special precedence)
%token ID INTEGERNUM REALNUM STR

//Associativity & precedence matched to C++ syntax
%right ASSIGN
%left OR
%left AND
%left RELOP
%left ADDOP
%left MULOP
%right NOT

// Symbols (Highest priority)
%precedence '(' ')' '{' '}' '.' ';' ',' ':'

%%

program : fdefs                         {parseTree=new NodeSymbol("PROGRAM",$1);}
;

fdefs : /* epsilon */                   {$$=new NodeSymbol("FDEFS", EPSILON);}
	| fdefs func_api {
                NodeFuncApi *func_api = $2;
                
                FunctionEntry* funcEntry = funcTable.find(func_api->funcProps.id);
                if(funcEntry != nullptr){
                    funcEntry = funcTable.insert(func_api->funcProps);
                } else { //found
                    if(!funcEntry.matchExisting(func_api->funcProps))
                        semantic_error("duplicate declaration of function with different API");
                    //override args to ensure correct arg naming
                    funcEntry->props.args = func_api->funcProps.args;
                }
                if(funcEntry->isDefined())
                    semantic_error("duplicate definition of a function");
                funcTable.setCurrent(funcEntry);
                funcEntry->define(code.nextQuad());
        } blk            {
                $$=new NodeSymbol("FDEFS",concatList(concatList($1,$2),$3));
                NodeStatement *blk = $3;

                if(!blk->breaklist.empty())
                    semantic_error("break statement not within loop");

                code.emit("RETRN"); //fallback, for when not defined
        }
        | fdefs func_api ';'            {
                $$=new NodeSymbol("FDEFS",concatList(concatList($1,$2),$3));
                NodeFuncApi *func_api = $2;

                FunctionEntry* funcEntry = funcTable.find(func_api->funcProps.id);
                if(funcEntry != nullptr){
                    funcTable.insert(func_api->funcProps);
                } else { //found
                    if(!funcEntry.matchExisting(func_api->funcProps)){
                        semantic_error("duplicate declaration of function with different API");
                    } 
                }
        }
;

func_api : type ID '(' func_args ')'    {
                $$=new NodeFuncApi("FUNC_API",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));
                NodeFuncApi* func_api;
                NodeType *type = $1;
                NodeToken *id = $2;
                NodeArgsList *func_args = $4;

                FunctionProps funcProps = {
                    type->typeValue,
                    id->value,
                    func_args->argsList
                };
                func_api->funcProps = funcProps;
            } 
;

func_args : func_arglist                {
                $$=new NodeArgsList("FUNC_ARGS",$1);
                NodeArgsList* func_args = $$;
                NodeArgsList* func_arglist = $1;

                func_args->argsList = func_arglist->argsList;
            }       
            | /* epsilon */             {$$=new NodeArgsList("FUNC_ARGS", EPSILON);}
;

func_arglist :  func_arglist ',' dcl    {
                $$=new NodeArgsList("FUNC_ARGLIST",concatList(concatList($1,$2),$3));
                NodeArgsList *func_arglist = $$;
                NodeArgsList *func_arglist1 = $1;
                NodeDeclaration *dcl = $3;

                func_arglist->argsList = func_arglist1->argsList;
                for(string id : dcl->idList) {
                    //check duplicate arg names
                    for(ArgDeclaration argIt : func_arglist->argsList){
                        if(argIt.id == id)
                            semantic_error("Can't redecalre same variable name");
                    }
                    ArgDeclaration arg(id, dcl->idType);
                    func_arglist->argsList.push_back(arg);
                }
        } 
        | dcl                   {
                $$=new NodeArgsList("FUNC_ARGLIST",$1);
                NodeArgsList *func_arglist = $$;
                NodeDeclaration *dcl = $1;

                for(string id : dcl->idList){
                    ArgDeclaration arg(id, dcl->idType);
                    func_arglist->argsList.push_back(arg);
                }
        }
;

blk : '{'                             { 
                varTable.push();
                if(varTable.functionArgs.size() > 0){
                    int i = FUNC_ARGS_OFFSET;
                    for(ArgDeclaration arg : functionArgs){ //Place function args are in the first scope
                        string argFunc = newTable.newVar(arg.id, arg.type);
                        code.emit(string("LOAD") + (arg.type == eINT) ? "I" : "F", argFunc, $FP, i);
                        i++;
                    }
                    varTable.functionArgs.clear();
                }
        } 
        stlist '}'                    {
                $$=new NodeStatement("BLK",concatList(concatList($1,$2),$3));
                NodeStatement *blk = $$;
                NodeStatement *stlist = $1;

                blk->nextlist = stlist->nextlist;
                blk->breaklist = stlist->breaklist;
                varTable.pop();
                varTable.front().resetTmps();
        } 
;

dcl :   ID ':' type                     {
                $$=new NodeDeclaration("DCL",concatList(concatList($1,$2),$3));
                NodeDeclaration *dcl = $$;
                NodeToken *id = $1;
                NodeType *type = $3;

                if(type->typeValue == eVOID)
                        semantic_error("variable can't be 'void'");
                
                dcl->idType = type->typeValue;
                dcl->idList.push_front(id->value);
                }
        | ID ',' dcl                    {
                &&=new NodeType("DCL",concatList(concatList($1,$2),$3));
                NodeType *dcl = $$;
                NodeToken *id = $1;
                NodeType *dcl1 = $3;

                //Check if previously decalred same name
                if(dcl1->idList.find(id->value) != dcl1->idList.end()){
                    semantic_error("Can't redecalre same variable name");
                }

                dcl->idType = dcl1->typeValue;
                dcl->idList = dcl1->idList;
                dcl->idList.push_front(id->value);
        }
;

type :  INT                             {
                $$=new NodeType("TYPE",$1);
                $$->typeValue = eINT;
        }
        | FLOAT                         {
                $$=new NodeType("TYPE",$1);
                $$->typeValue = eFLOAT;
        }
        | VOID                          {
                $$=new NodeType("TYPE",$1);
                $$->typeValue = eVOID;
        }
;

stlist : stlist M stmt                    {
                $$=new NodeStatement("STLIST",concatList(concatList($1,$2),$3));
                NodeStatement *stlist=$$;
                NodeStatement *stlist1=$1;
                NodeMarkerM *M=$2;
                NodeStatement *stmt=$3;

                code.backpatch(stlist1.nextlist, M->quad);
                stlist->nextlist.merge(stmt->nextlist);
                stlist->breaklist.merge(stmt->breaklist);
                stlist->breaklist.merge(stlist1->breaklist);
        }
         |/* epsilon */                 {$$=new NodeSymbol("STLIST", EPSILON);}
;

stmt :  dcl ';'                         {
                $$=new NodeStatement("STMT",concatList($1,$2));
                NodeDeclaration *dcl = $1;

                for(string id : dcl->idList){
                    // variable can't be declared twice in the same block
                    if(varTable.isInScope(id))
                        semantic_error("declaration of an already declared variable within the block");                     
                    varTable.front().newVar(id, dcl->idType);
                }
        }
        | assn                          {$$=new NodeStatement("STMT",$1);}
        | exp ';'                       {$$=new NodeStatement("STMT",concatList($1,$2));}
        | cntrl                         {
                $$=new NodeStatement("STMT",$1);
                NodeStatement *stmt = $$;
                NodeStatement *cntrl = $1; 

                stmt->nextlist = cntrl->nextlist;
                stmt->breaklist = cntrl->breaklist;
        }
        | read                          {$$=new NodeStatement("STMT",$1);}
        | write                         {$$=new NodeStatement("STMT",$1);}
        | return                        {$$=new NodeStatement("STMT",$1);}
        | blk                           {
                $$=new NodeStatement("STMT",$1);
                NodeStatement *stmt = $$;
                NodeStatement *blk = $1;

                stmt->nextlist = blk->nextlist;
                stmt->breaklist = blk->breaklist;
                
        }
        | BREAK ';'                     {
                $$=new NodeStatement("STMT",concatList($1,$2));
                NodeStatement *stmt = $$;

                stmt->breaklist.push_back(code.nextQuad());
                code.emit("UJUMP -1");
        }
;

return : RETURN exp ';'                 {
            $$=new NodeSymbol("RETURN",concatList(concatList($1,$2),$3));
            NodeExpression *exp = $2;
            
            //check return type matches function's return type
            if(funcTable.getCurrent()->props.type != exp->expType)
                semantic_error("return value type isn't matching function's declaration");

            if(exp->expType == eVOID)
                semantic_error("return value type can't be void");

            //Store return value in "return register"
            if(exp->expType == eINT)
                code.emit("COPYI", $RT_I, exp->place);
            else if(exp->expType == eFLOAT)
                code.emit("COPYF", $RT_F, exp->place);

            code.emit("RETRN");
        }
        | RETURN ';'                    {
            $$=new NodeSymbol("RETURN",concatList($1,$2));

            if(funcTable.getCurrent()->props.type != eVOID)
                semantic_error("expected a return argument");

            code.emit("RETRN");
        }
;

write : WRITE '(' exp ')' ';'           {
                $$=new NodeSymbol("WRITE",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));

                NodeExpression *exp = $3;
                
                if(exp->expType == eVOID)
                        semantic_error("can't assign/read void expressions");
                if(exp->expType == eINT)
                    code.emit("PRNTI", exp->place);
                else if(exp->expType == eFLOAT)
                    code.emit("PRNTF", exp->place);
                
                } 
        | WRITE '(' STR ')' ';'         {
                $$=new NodeSymbol("WRITE",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));

                NodeToken *strToken = $3;

                string str = strToken->value;
                for(int i=0; i<str.length();i++){
                    if(str[i] == '\\'){
                        i++;
                        switch(str[i]){
                            case 'n':
                                code.emit("PRNTC 10");
                                break;
                            case 't':
                                code.emit("PRNTC 9");
                                break;
                            case '"':
                                code.emit("PRNTC 34");
                                break;
                            default:
                                unexpected_error("Unknown char after \\");
                        }
                    } else {
                        code.emit("PRNTC", to_string(int(str[i])));
                    }
                }
        } 
;

read : READ '(' lval ')' ';'            {
                $$=new NodeSymbol("READ",concatList(concatList(concatList(concatList($1,$2),$3),$4),$5));
                NodeSymbol *read = $$;
                NodeExpression *lval = $3;
                
                // lval can't be void - it's guarrnteed at this point
                string type = (lval->expType == eINT) ? "I" : "F";
                code.emit(string("COPY")+type, lval->place, exp->place);                
        } 
;

assn : lval ASSIGN exp ';'              {
                $$=new NodeStatement("ASSN",concatList(concatList(concatList($1,$2),$3),$4));
                NodeStatement *assn = $$;
                NodeExpression *lval = $1;
                NodeExpression *exp1 = $3;

                if(lval->expType != exp->expType)
                        semantic_error("assignment of different types");
                // lval can't be void - it's guarrnteed at this point
                string type = (lval->expType == eINT) ? "I" : "F";
                code.emit(string("COPY")+type, lval->place, exp->place);
        } 
;

lval : ID                               {
                $$ = new NodeExpression("LVAL",id);
                NodeExpression *lval = $$;
                NodeToken *id = $1;
                
                // search ID in the symbol table (must have been declared)
                VarEntry idEntry;
                bool found = varTable.lookupVarTableList(idEntry, id->value);
                if(!found)
                        semantic_error("accessed undeclared variable");
                if(lval->expType == eVOID)
                        semantic_error("can't assign/read void expressions");

                lval->expType = idEntry->type;
                lval->place = place;
        }
;       

fullwhile : FULL_WHILE N M bexp DO M stmt {
                $$ = new NodeBexp("FULLWHILE",concatList(concatList(concatList(concatList(concatList(concatList($1,$2),$3),$4)$5)$6)$7));
                NodeBexp *fullwhile = $$;
                NodeMarkerN *N = $2;
                NodeMarkerM *M1 = $3;
                NodeBexp *bexp = $4;
                NodeMarkerM *M2 = $6;
                NodeStatement *stmt = $7;

                code.emit("UJUMP", M1->quad);
                code.backpatch(N->nextlist,code.nextQuad());
                string res = varTable.front().newTemp(eINT);
                code.emit("COPYI", res , "0"); 
                code.emit("UJUMP", M1->quad);
                code.backpatch(bexp->truelist,code.nextQuad());
                code.emit("COPYI", res , "1"); 
                code.emit("UJUMP", M2->quad);
                code.backpatch(bexp->falselist,code.nextQuad());
                fullwhile->falselist = CodeLineList(code.nextQuad());
                fullwhile->falselist.merge(stmt->breaklist);
                code.emit("BREQZ", res , "-1"); 
                fullwhile->truelist = CodeLineList(code.nextQuad());
                code.emit("UJUMP -1");
                code.backpatch(stmt->nextlist,M1->quad);
        } 
;

cntrl : IF bexp THEN M stmt N ELSE M stmt     {
                $$ = new NodeStatement("CNTRL",concatList(concatList(concatList(concatList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6)$7)$8)$9));
                NodeStatement *cntrl = $$;
                NodeBexp *bexp = $2;
                NodeMarkerM *M1 = $4;
                NodeBexp *stmt1 = $5;
                NodeMarkerN *N = $6;
                NodeMarkerM *M2 = $8;
                NodeBexp *stmt2 = $9;
                
                code.backpatch(bexp->truelist, M1->quad);
                code.backpatch(bexp->falselist, M2->quad);
                cntrl->nextlist.merge(N->nextlist);
                cntrl->nextlist.merge(stmt1->nextlist);
                cntrl->nextlist.merge(stmt2->nextlist);
                cntrl->breaklist.merge(stmt1->breaklist);
                cntrl->breaklist.merge(stmt2->breaklist);
                
        } 
        | IF bexp THEN M stmt             {
                $$ = new NodeStatement("CNTRL",concatList(concatList(concatList(concatList($1,$2),$3),$4)$5));
                NodeStatement *cntrl = $$;
                NodeBexp *bexp = $2;
                NodeMarkerM *M = $4;
                NodeBexp *stmt = $5;
                
                code.backpatch(bexp->truelist, M->quad);
                cntrl->nextlist.merge(bexp->falselist);
                cntrl->nextlist.merge(stmt->nextlist);
                cntrl->breaklist.merge(stmt->breaklist);
        
        } 
        | WHILE M bexp DO M stmt            {
                $$ = new NodeStatement("CNTRL",concatList(concatList(concatList(concatList(concatList($1,$2),$3),$4)$5)$6));
                NodeStatement *cntrl = $$;
                NodeMarkerM *M1 = $2;
                NodeBexp *bexp = $3;
                NodeMarkerM *M2 = $5;
                NodeStatement *stmt = $6;

                code.backpatch(bexp->truelist,M2->quad);
                code.backpatch(stmt->nextlist,M1->quad);
                cntrl->nextlist.merge(bexp->falselist);
                cntrl->nextlist.merge(stmt->breaklist);
                code.emit("UJUMP", M1->quad); //support "fall through" from stmt
        } 
        | fullwhile                     {
                $$ = new NodeStatement("CNTRL",$1);
                NodeStatement *cntrl = $$;
                NodeBexp *fullwhile = $1;
                
                // fullwhile has truelist & falselist that in a case of cntrl statement both points on the same "goto line"  
                cntrl->nextlist.merge(fullwhile->truelist);
                cntrl->nextlist.merge(fullwhile->falselist);
        }
;

bexp :  bexp OR M bexp                  {
                $$ = new NodeBexp("BEXP",concatList(concatList(concatList($1,$2),$3)$4));
                NodeBexp *bexp = $$;
                NodeBexp *bexp1 = $1;
                NodeMarkerM *M = $3;
                NodeBexp *bexp2 = $4;
                
                code.backpatch(bexp1->falselist, M->quad);
                bexp->truelist.merge(bexp1->truelist);
                bexp->truelist.merge(bexp2->truelist);
                bexp->falselist.merge(bexp2->falselist);
        }
        | bexp AND M bexp               {
                $$ = new NodeBexp("BEXP",concatList(concatList(concatList($1,$2),$3)$4));
                NodeBexp *bexp = $$;
                NodeBexp *bexp1 = $1;
                NodeMarkerM *M = $3;
                NodeBexp *bexp2 = $4;
                
                code.backpatch(bexp1->truelist,M->quad);
                bexp->truelist.merge(bexp2->truelist);
                bexp->falselist.merge(bexp1->falselist);
                bexp->falselist.merge(bexp2->falselist);
        }
        | NOT bexp                      {
                $$ = new NodeBexp("BEXP",concatList($1,$2));
                NodeBexp *bexp = $$;        
                NodeBexp *bexp1 = $2;        

                bexp->falselist.merge(bexp1->truelist);
                bexp->truelist.merge(bexp1->falselist);
        }
        | exp RELOP exp                 {
                $$ = new NodeBexp("BEXP",concatList(concatList($1,$2),$3));
                NodeBexp *bexp = $$;        
                NodeExpression *exp1 = $1;
                NodeExpression *exp1 = $3;

                if(exp1->expType != exp2->expType)
                        semantic_error("RELOP between incompatible types");
                if(exp1->expType == eVOID)
                        semantic_error("RELOP can't be done with 'void'");                
                string type = (exp1->expType == eINT) ? "I" : "F"; 
                
                // calculate RELOP
                string res = varTable.front().newTemp(eINT);
                switch (RelopHit($1->value)){
                case eEq:
                        code.emit(string("SEQU")+type, res, exp1->place, exp2->place);
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", res, "-1"); //expressions equal --> res=1 
                        break;
                case eNeq:
                        code.emit(string("SNEQ")+type, res, exp1->place, exp2->place);
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", res, "-1");
                        break;
                case eLt:
                        code.emit(string("SLET")+type, res, exp1->place, exp2->place);
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", res, "-1");
                        break;
                case eLtEq:
                        code.emit(string("SGRT")+type, res, exp1->place, exp2->place);
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BEQZ", res, "-1"); //exp1 <= exp2 --> res=0
                        break;
                case eGt:
                        code.emit(string("SGRT")+type, res, exp1->place, exp2->place);
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BNEQZ", res, "-1");
                        break;
                case eGtEq:
                        code.emit(string("SLET")+type, res, exp1->place, exp2->place);
                        bexp->truelist.push_back(code.nextQuad());
                        code.emit("BEQZ", res, "-1"); //exp1 >= exp2 --> res=0
                        break;
                default:
                        unexpected_error("can't find RELOP match");
                        break;
                }       

                bexp->falselist.push_back(code.nextQuad());
                code.emit("UJUMP -1");
                
        }
        | '(' bexp ')'                  {
                $$ = new NodeBexp("BEXP",concatList(concatList($1,$2),$3));
                NodeBexp *bexp = $$;        
                NodeBexp *bexp1 = $2;

                bexp->truelist = bexp1->truelist;        
                bexp->falselist = bexp1->falselist;        
        }
        | fullwhile                     {
                $$ = new NodeBexp("BEXP",$1);
                NodeBexp *fullwhile = $1;
                NodeBexp *bexp = $$;        

                bexp->truelist = fullwhile->truelist;        
                bexp->falselist = fullwhile->falselist;        
        }
;

exp :   exp ADDOP exp 	                {
                $$=new NodeExpression("EXP",concatList(concatList($1,$2),$3));
                NodeExpression *exp = $$;
                NodeExpression *exp1 = $1;
                NodeToken *addop = $2;
                NodeExpression *exp2 = $3;

                if(exp1->expType != exp2->expType)
                        semantic_error("assignment of different types");
                if(exp1->expType == eVOID)
                        semantic_error("ADDOP can't be done with 'void'");
                
                string type = (exp1->expType == eINT) ? "I" : "F";
                // calculate ADDOP
                string res = varTable.front().newTemp(exp1->expType);
                switch (ArithHit(addop->value)){
                case eAdd:
                        code.emit(string("ADD2")+type, res, exp1->place, exp2->place);
                        break;
                case eNeq:
                        code.emit(string("SUBT")+type, res, exp1->place, exp2->place);
                        break;
                default:
                        unexpected_error("can't find ADDOP match");
                        break;
                }

                exp->expType = exp1->expType;
                exp->place = res;
        }
        | exp MULOP exp                 {
                $$=new NodeExpression("EXP",concatList(concatList($1,$2),$3));
                NodeExpression *exp = $$;
                NodeExpression *exp1 = $1;
                NodeToken *mulop = $2;
                NodeExpression *exp2 = $3;

                if(exp1->expType != exp2->expType)
                        semantic_error("assignment of different types");
                if(exp1->expType == eVOID)
                        semantic_error("ADDOP can't be done with 'void'");
                
                string type = (exp1->expType == eINT) ? "I" : "F";
                // calculate MULOP
                string res = varTable.front().newTemp(exp1->expType);
                switch (ArithHit(addop->value)){
                case eMul:
                        code.emit(string("MULT")+type, res, exp1->place, exp2->place);
                        break;
                case eDiv:
                        code.emit(string("DIVD")+type, res, exp1->place, exp2->place);
                        break;
                default:
                        unexpected_error("can't find ADDOP match")
                        break;
                }

                exp->expType = exp1->expType;
                exp->place = res;
        }
        | '(' exp ')'                   {
            $$=new NodeExpression("EXP",concatList(concatList($1,$2),$3));
            NodeExpression *exp = $$;
            NodeExpression *exp1 = $2;

            exp->place = exp1->place;
            exp->expType = exp1->expType;
        }
        | '(' type ')' exp              {
            $$=new NodeExpression("EXP",concatList(concatList(concatList($1,$2),$3),$4));
            NodeExpression *exp = $$;
            NodeType *type = $2;
            NodeExpression *exp1 = $4;

            if(type->typeValue == eVOID)
                semantic_error("can't cast to void");
            if(exp1->expType == eVOID)
                semantic_error("can't cast from void");

            if(type->typeValue == exp1->expType){
                //No cast needed
                exp->place = exp1->place;
                exp->expType = exp1->expType;
            } else {
                if(type->typeValue == eINT){
                    exp->place = varTable.front().newTemp(eINT);
                    code.emit("CFTOI", exp->place, exp1->place);
                } else { //eFLOAT
                    exp->place = varTable.front().newTemp(eFLOAT);
                    code.emit("CITOF", exp->place, exp1->place)
                }
            }

        }
        | ID                            {
                $$=new NodeExpression("EXP",$1);
                NodeExpression *exp = $$;
                NodeToken *id = $1; 
                
                VarEntry idEntry;
                bool found = varTable.lookupVarTableList(idEntry, id->value);
                if(!found)
                    semantic_error("tried evaluating undeclared variable");
                exp->expType = idEntry.type;
                exp->place = idEntry.place;
        }
        | num                           {
                $$=new NodeExpression("EXP",$1);
                NodeExpression *exp = $$;
                NodeExpression *num = $1;

                exp->place = num->place;
                exp->expType = num->expType;
        }
        | call                          {
                $$=new NodeExpression("EXP",$1);
                NodeExpression *exp = $$;
                NodeExpression *call = $1;

                exp->place = call->place;
                exp->expType = call->expType;
        }
;

num :   INTEGERNUM                      {
                $$=new NodeExpression("NUM",$1);
                NodeExpression *num = $$;
                NodeToken *integer = $1;

                num->place = varTable.front().newTemp(eINT);
                num->expType = eINT;
                code.emit("COPYI", num->place , integer->value); 
        }
        | REALNUM                       {
                $$=new NodeExpression("NUM",$1);
                NodeExpression *num = $$;
                NodeToken *real = $1;

                num->place = varTable.front().newTemp(eFLOAT);
                num->expType = eFLOAT;
                code.emit("COPYF", num->place , real->value); 
        }
;

call : ID '(' call_args ')'             {
        $$=new NodeExpression("CALL",concatList(concatList(concatList($1,$2),$3),$4));
        NodeExpression *call = $$;
        NodeToken *id = $1;
        NodeArgsList *call_args = $3;

        FunctionEntry* funcEntry = funcTable.find(id->value);
        if(funcEntry == nullptr)
            semantic_error("called an undeclared function");
        if(call_args->exprList.size() != funcEntry->props.args.size())
            semantic_error("wrong number of arguments passed to function");

        varTable.storeIds(); //for each var: Mem[$SP++] = var
        code.emit("STORI", $RA, $SP, "0"); //Mem[$SP] = $RA
        code.emit("STORI", $FP, $SP, "1"); //Mem[$SP+1] = $FP
        
        code.emit("ADD2I", $FP, $SP, "1");
        //store arguments
        
        for(int i = FUNC_ARGS_OFFSET, auto argIt = funcEntry->props.args.begin(), auto expArg = call_args->expList.begin();
                argIt != funcEntry->props.args.end();
                i++, argIt++, expArg++){
            if(expArg->expType != argIt->type)
                semantic_error("wrong type of argument passed to function");

            string type = (argIt->type == eINT) ? "I" : "F";
            code.emit(string("STOR")+type, expArg->place, $FP, i);
            i++;
        }
        //set $SP below arguments
        code.emit("ADD2I", $SP, $FP, funcEntry->props.size()+FUNC_ARGS_OFFSET);

        //jump
        string L = funcEntry->getPlace(code.nextQuad());
        code.emit("JLINK", L);
        
        //return from callee
        
        //restore $SP, $FP
        code.emit("COPYI", $SP, $FP); //$SP = $FP
        code.emit("LOADI", $FP, $FP); //Mem[$SP+1] = $FP
        code.emit("SUBTI", $SP, 1); //$SP-- 
        code.emit("LOADI", $RA, $SP, 0); //$RA = Mem[$SP]
        varTable.loadIds();  //for each var: var = Mem[--$SP]
        
        //store the return value, non-void return value
        if(funcEntry->props.type == eINT){
                call->place = VariableTable.newTemp(eINT);
                code.emit("COPYI", call->place, $RT_I);
        } else if(funcEntry->props.type == eFLOAT){
                call->place = VariableTable.newTemp(eFLOAT);
                code.emit("COPYF", call->place, $RT_F);
        }
;

call_args : call_arglist                {
                $$=new NodeArgsList("CALL_ARGS",$1);
                NodeArgsList *call_args = $$;
                NodeArgsList *call_arglist = $1;

                call_args->exprList = call_arglist->exprList;
            }
            |/* epsilon */              {$$=new NodeSymbol("CALL_ARGS", EPSILON);} 
;

call_arglist :  call_arglist ',' exp    {
                $$=new NodeArgsList("CALL_ARGLIST",concatList(concatList($1,$2),$3));
                NodeArgsList *call_arglist = $$;
                NodeArgsList *call_arglist1 = $1;
                NodeExpression *exp = $3;
                
                if(exp->expType == eVOID)
                    semantic_error("can't pass argument of type 'void' to a function")
                call_arglist->exprList = call_arglist1->exprList;
                call_arglist->exprList.push_back(*exp);
        }
        | exp                           {
                $$=new NodeArgsList("CALL_ARGLIST",$1);
                NodeArgsList *call_arglist = $$;
                NodeExpression *exp = $3;

                if(exp->expType == eVOID)
                    semantic_error("can't pass argument of type 'void' to a function")
                call_arglist->exprList.push_back(*exp);
        }
;

M : /*epsilon*/                         {$$=new NodeMarkerM();}
;

N : /*epsilon*/                         {$$=new NodeMarkerN();}
;

%%

void unexpected_error(const char* err){
    cout << err << endl;
    exit(10);
}

void semantic_error(const char* err){
    cout << "Semantic error: " err << "in line number " yylineno <<endl;
    exit(3)
}

void yyerror(const char*) {
    cout << "Syntax error: '" << yytext << "' in line number " << yylineno << endl;
    exit(2);
}