- We don't have any global/static vars, but we do have *constant* strings. We maybe should allocate constant strings at memory, and write the string startin addr & length on symbol table.
- Memory allocator class: NOT FOR STACK (which is runtime), but for static data only
    _________________
    |     STACK     |
    |     ....      |
    |               |
    |_______________| <-- Memory allocator should remember this location + mapping for existing data
    |  STATIC DATA  |
    |_______________|

Register mapping. X should be known, independent on program
0                 X          1023
_____________________________
| Saved registers | Temp     |
|_________________|__________|

- Register assignment: separate for var and temp - each starts in "temp" region from different sides
- Symbol tables
    - varScopeTable
    - stringTable
    - functionTable
- Insert code of storing all strings at rule of program, using N marker to jump to the end (and jump back to the top).
    But wait - isn't the linker jumping to main? Will this code ever be executed?

- Optimization: when parsing exp->num, we can skip assignment of temp register, and just assign the known value into exp.knownValue
    But this means, that whenever accessing exp from now on, we first need to check if knownValue exists.

- Think how to handle return value: should 'call' create a temp? If not, and it passed the place of the fixed return value reg, what
    if another function is called? (e.g a = foo(a) + foo(a))