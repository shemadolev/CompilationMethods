%{
    #include <iostream>
    #include "part2_helpers.h"
    using namespace std;

    extern int yylex();
    void yyerror(const char*);

    extern int yylineno;
    extern const char* yytext;

    ParserNode *parseTree; 
%}

// reserved words 
%token  INT
        FLOAT
        VOID
        WRITE
        READ
        WHILE
        DO
        IF
        RETURN
        FULL_WHILE
        BREAK

// solve dangling else (select shift over reduce)  
%precedence THEN
%precedence ELSE

// other
%token ID INTEGERNUM REALNUM STR

%right ASSIGN
%left OR
%left AND
%left RELOP
%left ADDOP
%left MULOP
%right NOT

// symbols
%precedence '(' ')' '{' '}' '.' ';' ',' ':'

%%

program : fdefs                         {parseTree=makeSymbol("PROGRAM",$1);}
;

fdefs : /* epsilon */                   {$$=makeNode("FDEFS", NULL, makeNode("EPSILON", NULL, NULL));}
	| fdefs func_api blk            {$$=makeSymbol("FDEFS",$1); concatList($1,$2); concatList($1,$3);}
        | fdefs func_api ';'            {$$=makeSymbol("FDEFS",$1); concatList($1,$2); concatList($1,$3);}
;

func_api : type ID '(' func_args ')'    {$$=makeSymbol("FUNC_API",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); concatList($1,$5);} 
;

func_args : func_arglist                {$$=makeSymbol("FUNC_ARGS",$1);}       
            | /* epsilon */             {$$=makeNode("FUNC_ARGS", NULL, makeNode("EPSILON", NULL, NULL));}
;

func_arglist :  func_arglist ',' dcl    {$$=makeSymbol("FUNC_ARGLIST",$1); concatList($1,$2); concatList($1,$3);} 
                | dcl                   {$$=makeSymbol("FUNC_ARGLIST",$1);}
;

blk : '{' stlist '}'                    {$$=makeSymbol("BLK",$1); concatList($1,$2); concatList($1,$3);} 
;

dcl :   ID ':' type                     {$$=makeSymbol("DCL",$1); concatList($1,$2); concatList($1,$3);}
        | ID ',' dcl                    {$$=makeSymbol("DCL",$1); concatList($1,$2); concatList($1,$3);}
;

type :  INT                             {$$=makeSymbol("TYPE",$1);}
        | FLOAT                         {$$=makeSymbol("TYPE",$1);}
        | VOID                          {$$=makeSymbol("TYPE",$1);} 
;

stlist : stlist stmt                    {$$=makeSymbol("STLIST",$1); concatList($1,$2);}
         |/* epsilon */                 {$$=makeNode("STLIST", NULL, makeNode("EPSILON", NULL, NULL));}
;

stmt :  dcl ';'                         {$$=makeSymbol("STMT",$1); concatList($1,$2);}
        | assn                          {$$=makeSymbol("STMT",$1);}
        | exp ';'                       {$$=makeSymbol("STMT",$1); concatList($1,$2);}
        | cntrl                         {$$=makeSymbol("STMT",$1);}
        | read                          {$$=makeSymbol("STMT",$1);}
        | write                         {$$=makeSymbol("STMT",$1);}
        | return                        {$$=makeSymbol("STMT",$1);}
        | blk                           {$$=makeSymbol("STMT",$1);}
        | BREAK ';'                     {$$=makeSymbol("STMT",$1); concatList($1,$2);}
;

return : RETURN exp ';'                 {$$=makeSymbol("RETURN",$1); concatList($1,$2); concatList($1,$3); }
        | RETURN ';'                    {$$=makeSymbol("RETURN",$1); concatList($1,$2); }
;

write : WRITE '(' exp ')' ';'           {$$=makeSymbol("WRITE",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); concatList($1,$5);} 
        | WRITE '(' STR ')' ';'         {$$=makeSymbol("WRITE",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); concatList($1,$5);} 
;

read : READ '(' lval ')' ';'            {$$=makeSymbol("READ",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); concatList($1,$5);} 
;

assn : lval ASSIGN exp ';'              {$$=makeSymbol("ASSN",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); } 
;

lval : ID                               {$$=makeSymbol("LVAL",$1);}
;

fullwhile : FULL_WHILE bexp DO stmt     {$$=makeSymbol("FULLWHILE",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); } 
;

cntrl : IF bexp THEN stmt ELSE stmt     {$$=makeSymbol("CNTRL",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); concatList($1,$5); concatList($1,$6);} 
        | IF bexp THEN stmt             {$$=makeSymbol("CNTRL",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); } 
        | WHILE bexp DO stmt            {$$=makeSymbol("CNTRL",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4); } 
        | fullwhile                     {$$=makeSymbol("CNTRL",$1);}
;

bexp :  bexp OR bexp                    {$$=makeSymbol("BEXP",$1); concatList($1,$2); concatList($1,$3); }
        | bexp AND bexp                 {$$=makeSymbol("BEXP",$1); concatList($1,$2); concatList($1,$3); }
        | NOT bexp                      {$$=makeSymbol("BEXP",$1); concatList($1,$2); }
        | exp RELOP exp                 {$$=makeSymbol("BEXP",$1); concatList($1,$2); concatList($1,$3); }
        | '(' bexp ')'                  {$$=makeSymbol("BEXP",$1); concatList($1,$2); concatList($1,$3); }
        | fullwhile                     {$$=makeSymbol("BEXP",$1);}
;

exp :   exp ADDOP exp 	                {$$=makeSymbol("EXP",$1); concatList($1,$2); concatList($1,$3); }
        | exp MULOP exp                 {$$=makeSymbol("EXP",$1); concatList($1,$2); concatList($1,$3); }
        | '(' exp ')'                   {$$=makeSymbol("EXP",$1); concatList($1,$2); concatList($1,$3); }
        | '(' type ')' exp              {$$=makeSymbol("EXP",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4);}
        | ID                            {$$=makeSymbol("EXP",$1);}
        | num                           {$$=makeSymbol("EXP",$1);}
        | call                          {$$=makeSymbol("EXP",$1);}
;

num :   INTEGERNUM                      {$$=makeSymbol("NUM",$1);}
        | REALNUM                       {$$=makeSymbol("NUM",$1);}
;

call : ID '(' call_args ')'             {$$=makeSymbol("CALL",$1); concatList($1,$2); concatList($1,$3); concatList($1,$4);}
;

call_args : call_arglist                {$$=makeSymbol("CALL_ARGS",$1);}
            |/* epsilon */              {$$=makeNode("CALL_ARGS", NULL, makeNode("EPSILON", NULL, NULL));} 
;

call_arglist :  call_arglist ',' exp    {$$=makeSymbol("CALL_ARGLIST",$1); concatList($1,$2); concatList($1,$3); }
                | exp                   {$$=makeSymbol("CALL_ARGS",$1);}
;


%%

void yyerror(const char*) {
    cout << "Syntax error: '" << yytext << "' in line number " << yylineno << endl;
}
